# -*- coding: utf-8 -*-
"""london_bikes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X7YiZEuLiVjKZkbB3olO8nMAah091y31

# **London Bike Dataset**
source : https://www.kaggle.com/datasets/hmavrodiev/london-bike-sharing-dataset

*If you don't already have a kaggle.json file, you'll need to download the kaggle.json file from the Kaggle website. To do this, go to your profile on Kaggle and click on "Create New API Token" under the API section. Then, the kaggle.json file will be downloaded to your computer.*
"""

# Uncomment the pip install code below if you haven't installed these libraries yet
!pip install pandas
!pip install kaggle

# import the pandas library
import pandas as pd
# import zipfile library (we will use this to extract the file downloaded from Kaggle)
import zipfile
# import kaggle library (we will use this to download the dataset programatically from Kaggle)
import kaggle

from google.colab import files
uploaded = files.upload()
for filename in uploaded.keys():
    print(f'Got this file: {filename} !')

# Move kaggle.json to root & check file in root
!mkdir -p /root/.kaggle/
!mv kaggle.json /root/.kaggle/
!ls /root/.kaggle/

"""Documentation on how to use the Kaggle API
https://www.kaggle.com/docs/api
"""

# download dataset from kaggle using the Kaggle API
!kaggle datasets download -d hmavrodiev/london-bike-sharing-dataset

# extract the file from the downloaded zip file
zipfile_name = 'london-bike-sharing-dataset.zip'
with zipfile.ZipFile(zipfile_name, 'r') as file:
    file.extractall()

# read in the csv file as a pandas dataframe
bikes = pd.read_csv("london_merged.csv")

# explore the data
bikes.info()

bikes.shape

bikes

# count the unique values in the weather_code column
bikes.weather_code.value_counts()

# count the unique values in the season column
bikes.season.value_counts()

# specifying the column names that I want to use
new_cols_dict ={
    'timestamp':'time',
    'cnt':'count',
    't1':'temp_real_C',
    't2':'temp_feels_like_C',
    'hum':'humidity_percent',
    'wind_speed':'wind_speed_kph',
    'weather_code':'weather',
    'is_holiday':'is_holiday',
    'is_weekend':'is_weekend',
    'season':'season'
}

# Renaming the columns to the specified column names
bikes.rename(new_cols_dict, axis=1, inplace=True)

# changing the humidity values to percentage (i.e. a value between 0 and 1)
bikes.humidity_percent = bikes.humidity_percent / 100

# creating a season dictionary so that we can map the integers 0-3 to the actual written values
season_dict = {
    '0.0':'spring',
    '1.0':'summer',
    '2.0':'autumn',
    '3.0':'winter'
}

# creating a weather dictionary so that we can map the integers to the actual written values
weather_dict = {
    '1.0':'Clear',
    '2.0':'Scattered clouds',
    '3.0':'Broken clouds',
    '4.0':'Cloudy',
    '7.0':'Rain',
    '10.0':'Rain with thunderstorm',
    '26.0':'Snowfall'
}

# changing the seasons column data type to string
bikes.season = bikes.season.astype('str')
# mapping the values 0-3 to the actual written seasons
bikes.season = bikes.season.map(season_dict)

# changing the weather column data type to string
bikes.weather = bikes.weather.astype('str')
# mapping the values to the actual written weathers
bikes.weather = bikes.weather.map(weather_dict)

# checking our dataframe to see if the mappings have worked
bikes.head()

# writing the final dataframe to an excel file that we will use in our Tableau visualisations. The file will be the 'london_bikes_final.xlsx' file and the sheet name is 'Data'
bikes.to_excel('london_bikes_final.xlsx', sheet_name='Data')

# read data from excel file that generate above
bikes_cp = pd.read_excel('london_bikes_final.xlsx')
print(bikes_cp)